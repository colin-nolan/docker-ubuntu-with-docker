--- /tmp/docker/20.10/Dockerfile	2022-05-28 19:58:08.000000000 +0100
+++ releases/20.10/Dockerfile	2022-05-28 20:47:35.000000000 +0100
@@ -1,23 +1,20 @@
-#
-# NOTE: THIS DOCKERFILE IS GENERATED VIA "apply-templates.sh"
-#
-# PLEASE DO NOT EDIT IT DIRECTLY.
-#
-
-FROM alpine:3.16
-
-RUN apk add --no-cache \
-		ca-certificates \
-# Workaround for golang not producing a static ctr binary on Go 1.15 and up https://github.com/containerd/containerd/issues/5824
-		libc6-compat \
-# DOCKER_HOST=ssh://... -- https://github.com/docker/cli/pull/1014
-		openssh-client
+# DO NOT MODIFY - this file has been generated automatically!
+# The original has been changed using patches that can be found in ../patches
+ARG BASE_IMAGE=ubuntu:22.04
+
+FROM ${BASE_IMAGE}
+
+RUN apt-get update && apt-get install --no-install-recommends -y \
+        ca-certificates \
+        openssh-client \
+        wget \
+    && rm -rf /var/lib/apt/lists/
 
 # set up nsswitch.conf for Go's "netgo" implementation (which Docker explicitly uses)
 # - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
 # - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
 # - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
-RUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf
+RUN if [ ! -e /etc/nsswitch.conf ]; then echo 'hosts: files dns' > /etc/nsswitch.conf; fi
 
 ENV DOCKER_VERSION 20.10.16
 # TODO ENV DOCKER_SHA256
@@ -26,8 +23,8 @@
 
 RUN set -eux; \
 	\
-	apkArch="$(apk --print-arch)"; \
-	case "$apkArch" in \
+	arch="$(uname -m)"; \
+	case "$arch" in \
 		'x86_64') \
 			url='https://download.docker.com/linux/static/stable/x86_64/docker-20.10.16.tgz'; \
 			;; \
@@ -40,7 +37,7 @@
 		'aarch64') \
 			url='https://download.docker.com/linux/static/stable/aarch64/docker-20.10.16.tgz'; \
 			;; \
-		*) echo >&2 "error: unsupported architecture ($apkArch)"; exit 1 ;; \
+		*) echo >&2 "error: unsupported architecture ($arch)"; exit 1 ;; \
 	esac; \
 	\
 	wget -O docker.tgz "$url"; \
@@ -57,8 +54,8 @@
 
 ENV DOCKER_BUILDX_VERSION 0.8.2
 RUN set -eux; \
-	apkArch="$(apk --print-arch)"; \
-	case "$apkArch" in \
+    arch="$(uname -m)"; \
+	case "$arch" in \
 		'x86_64') \
 			url='https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-amd64'; \
 			sha256='c64de4f3c30f7a73ff9db637660c7aa0f00234368105b0a09fa8e24eebe910c3'; \
@@ -87,7 +84,7 @@
 			url='https://github.com/docker/buildx/releases/download/v0.8.2/buildx-v0.8.2.linux-s390x'; \
 			sha256='ec4bb6f271f38dca5a377a70be24ee2108a85f6e6ba511ad3b805c4f1602a0d2'; \
 			;; \
-		*) echo >&2 "warning: unsupported buildx architecture ($apkArch); skipping"; exit 0 ;; \
+		*) echo >&2 "warning: unsupported buildx architecture ($arch); skipping"; exit 0 ;; \
 	esac; \
 	plugin='/usr/libexec/docker/cli-plugins/docker-buildx'; \
 	mkdir -p "$(dirname "$plugin")"; \
@@ -98,8 +95,8 @@
 
 ENV DOCKER_COMPOSE_VERSION 2.5.1
 RUN set -eux; \
-	apkArch="$(apk --print-arch)"; \
-	case "$apkArch" in \
+	arch="$(uname -m)"; \
+	case "$arch" in \
 		'x86_64') \
 			url='https://github.com/docker/compose/releases/download/v2.5.1/docker-compose-linux-x86_64'; \
 			sha256='d99de1ea7616f2a4c7914d37674f0650660a5e832be555805a71c0fc377233c9'; \
@@ -124,7 +121,7 @@
 			url='https://github.com/docker/compose/releases/download/v2.5.1/docker-compose-linux-s390x'; \
 			sha256='68b9487106fd27e0f8c7defcf80fee2ab4f178f3ccc1d827fa0d2e82f80fa38b'; \
 			;; \
-		*) echo >&2 "warning: unsupported compose architecture ($apkArch); skipping"; exit 0 ;; \
+		*) echo >&2 "warning: unsupported compose architecture ($arch); skipping"; exit 0 ;; \
 	esac; \
 	plugin='/usr/libexec/docker/cli-plugins/docker-compose'; \
 	mkdir -p "$(dirname "$plugin")"; \
@@ -148,4 +145,4 @@
 # (doing both /certs and /certs/client so that if Docker does a "copy-up" into a volume defined on /certs/client, it will "do the right thing" by default in a way that still works for rootless users)
 
 ENTRYPOINT ["docker-entrypoint.sh"]
-CMD ["sh"]
+CMD ["bash"]
