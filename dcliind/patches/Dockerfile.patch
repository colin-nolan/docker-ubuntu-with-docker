--- Dockerfile	2020-02-16 22:39:54.000000000 +0000
+++ ubuntu-Dockerfile	2020-02-16 22:49:59.000000000 +0000
@@ -1,15 +1,14 @@
-FROM alpine:3.11
-
-RUN apk add --no-cache \
-		ca-certificates \
-# DOCKER_HOST=ssh://... -- https://github.com/docker/cli/pull/1014
-		openssh-client
-
-# set up nsswitch.conf for Go's "netgo" implementation (which Docker explicitly uses)
-# - https://github.com/docker/docker-ce/blob/v17.09.0-ce/components/engine/hack/make.sh#L149
-# - https://github.com/golang/go/blob/go1.9.1/src/net/conf.go#L194-L275
-# - docker run --rm debian:stretch grep '^hosts:' /etc/nsswitch.conf
-RUN [ ! -e /etc/nsswitch.conf ] && echo 'hosts: files dns' > /etc/nsswitch.conf
+# DO NOT MODIFY - this file has been generated automatically!
+# The original has been changed using patches that can be found in ../patches
+ARG BASE_IMAGE=ubuntu:18.04
+
+FROM ${BASE_IMAGE}
+
+RUN apt-get update && apt-get install --no-install-recommends -y \
+        ca-certificates \
+        openssh-client \
+        wget \
+    && rm -rf /var/lib/apt/lists/
 
 ENV DOCKER_CHANNEL stable
 ENV DOCKER_VERSION 19.03.6
@@ -20,8 +19,8 @@
 RUN set -eux; \
 	\
 # this "case" statement is generated via "update.sh"
-	apkArch="$(apk --print-arch)"; \
-	case "$apkArch" in \
+	arch="$(uname -m)"; \
+	case "$arch" in \
 # amd64
 		x86_64) dockerArch='x86_64' ;; \
 # arm32v6
@@ -30,7 +29,7 @@
 		armv7) dockerArch='armhf' ;; \
 # arm64v8
 		aarch64) dockerArch='aarch64' ;; \
-		*) echo >&2 "error: unsupported architecture ($apkArch)"; exit 1 ;;\
+		*) echo >&2 "error: unsupported architecture ($arch)"; exit 1 ;;\
 	esac; \
 	\
 	if ! wget -O docker.tgz "https://download.docker.com/linux/static/${DOCKER_CHANNEL}/${dockerArch}/docker-${DOCKER_VERSION}.tgz"; then \
@@ -61,4 +60,4 @@
 # (doing both /certs and /certs/client so that if Docker does a "copy-up" into a volume defined on /certs/client, it will "do the right thing" by default in a way that still works for rootless users)
 
 ENTRYPOINT ["docker-entrypoint.sh"]
-CMD ["sh"]
+CMD ["bash"]
